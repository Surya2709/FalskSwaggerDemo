# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.action import Action  # noqa: F401,E501
from swagger_server.models.meta_data import MetaData  # noqa: F401,E501
from swagger_server import util


class Alert(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, alert_id: str=None, info: str=None, meta_data: MetaData=None, action: Action=None, link: str=None, is_ack: bool=None, is_muted: bool=None, is_read: bool=None, is_discarded: bool=None):  # noqa: E501
        """Alert - a model defined in Swagger

        :param alert_id: The alert_id of this Alert.  # noqa: E501
        :type alert_id: str
        :param info: The info of this Alert.  # noqa: E501
        :type info: str
        :param meta_data: The meta_data of this Alert.  # noqa: E501
        :type meta_data: MetaData
        :param action: The action of this Alert.  # noqa: E501
        :type action: Action
        :param link: The link of this Alert.  # noqa: E501
        :type link: str
        :param is_ack: The is_ack of this Alert.  # noqa: E501
        :type is_ack: bool
        :param is_muted: The is_muted of this Alert.  # noqa: E501
        :type is_muted: bool
        :param is_read: The is_read of this Alert.  # noqa: E501
        :type is_read: bool
        :param is_discarded: The is_discarded of this Alert.  # noqa: E501
        :type is_discarded: bool
        """
        self.swagger_types = {
            'alert_id': str,
            'info': str,
            'meta_data': MetaData,
            'action': Action,
            'link': str,
            'is_ack': bool,
            'is_muted': bool,
            'is_read': bool,
            'is_discarded': bool
        }

        self.attribute_map = {
            'alert_id': 'alertId',
            'info': 'info',
            'meta_data': 'metaData',
            'action': 'action',
            'link': 'link',
            'is_ack': 'isAck',
            'is_muted': 'isMuted',
            'is_read': 'isRead',
            'is_discarded': 'isDiscarded'
        }
        self._alert_id = alert_id
        self._info = info
        self._meta_data = meta_data
        self._action = action
        self._link = link
        self._is_ack = is_ack
        self._is_muted = is_muted
        self._is_read = is_read
        self._is_discarded = is_discarded

    @classmethod
    def from_dict(cls, dikt) -> 'Alert':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The alert of this Alert.  # noqa: E501
        :rtype: Alert
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alert_id(self) -> str:
        """Gets the alert_id of this Alert.

        identifier for alerts  # noqa: E501

        :return: The alert_id of this Alert.
        :rtype: str
        """
        return self._alert_id

    @alert_id.setter
    def alert_id(self, alert_id: str):
        """Sets the alert_id of this Alert.

        identifier for alerts  # noqa: E501

        :param alert_id: The alert_id of this Alert.
        :type alert_id: str
        """
        if alert_id is None:
            raise ValueError("Invalid value for `alert_id`, must not be `None`")  # noqa: E501

        self._alert_id = alert_id

    @property
    def info(self) -> str:
        """Gets the info of this Alert.

        information of the alert   # noqa: E501

        :return: The info of this Alert.
        :rtype: str
        """
        return self._info

    @info.setter
    def info(self, info: str):
        """Sets the info of this Alert.

        information of the alert   # noqa: E501

        :param info: The info of this Alert.
        :type info: str
        """
        if info is None:
            raise ValueError("Invalid value for `info`, must not be `None`")  # noqa: E501

        self._info = info

    @property
    def meta_data(self) -> MetaData:
        """Gets the meta_data of this Alert.


        :return: The meta_data of this Alert.
        :rtype: MetaData
        """
        return self._meta_data

    @meta_data.setter
    def meta_data(self, meta_data: MetaData):
        """Sets the meta_data of this Alert.


        :param meta_data: The meta_data of this Alert.
        :type meta_data: MetaData
        """
        if meta_data is None:
            raise ValueError("Invalid value for `meta_data`, must not be `None`")  # noqa: E501

        self._meta_data = meta_data

    @property
    def action(self) -> Action:
        """Gets the action of this Alert.


        :return: The action of this Alert.
        :rtype: Action
        """
        return self._action

    @action.setter
    def action(self, action: Action):
        """Sets the action of this Alert.


        :param action: The action of this Alert.
        :type action: Action
        """
        if action is None:
            raise ValueError("Invalid value for `action`, must not be `None`")  # noqa: E501

        self._action = action

    @property
    def link(self) -> str:
        """Gets the link of this Alert.

        link to the interface  # noqa: E501

        :return: The link of this Alert.
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link: str):
        """Sets the link of this Alert.

        link to the interface  # noqa: E501

        :param link: The link of this Alert.
        :type link: str
        """
        if link is None:
            raise ValueError("Invalid value for `link`, must not be `None`")  # noqa: E501

        self._link = link

    @property
    def is_ack(self) -> bool:
        """Gets the is_ack of this Alert.

        acknowledged or not   # noqa: E501

        :return: The is_ack of this Alert.
        :rtype: bool
        """
        return self._is_ack

    @is_ack.setter
    def is_ack(self, is_ack: bool):
        """Sets the is_ack of this Alert.

        acknowledged or not   # noqa: E501

        :param is_ack: The is_ack of this Alert.
        :type is_ack: bool
        """
        if is_ack is None:
            raise ValueError("Invalid value for `is_ack`, must not be `None`")  # noqa: E501

        self._is_ack = is_ack

    @property
    def is_muted(self) -> bool:
        """Gets the is_muted of this Alert.

        whether the alert is muted or not  # noqa: E501

        :return: The is_muted of this Alert.
        :rtype: bool
        """
        return self._is_muted

    @is_muted.setter
    def is_muted(self, is_muted: bool):
        """Sets the is_muted of this Alert.

        whether the alert is muted or not  # noqa: E501

        :param is_muted: The is_muted of this Alert.
        :type is_muted: bool
        """
        if is_muted is None:
            raise ValueError("Invalid value for `is_muted`, must not be `None`")  # noqa: E501

        self._is_muted = is_muted

    @property
    def is_read(self) -> bool:
        """Gets the is_read of this Alert.

        it is readed by the user or not   # noqa: E501

        :return: The is_read of this Alert.
        :rtype: bool
        """
        return self._is_read

    @is_read.setter
    def is_read(self, is_read: bool):
        """Sets the is_read of this Alert.

        it is readed by the user or not   # noqa: E501

        :param is_read: The is_read of this Alert.
        :type is_read: bool
        """
        if is_read is None:
            raise ValueError("Invalid value for `is_read`, must not be `None`")  # noqa: E501

        self._is_read = is_read

    @property
    def is_discarded(self) -> bool:
        """Gets the is_discarded of this Alert.

        discarded or not   # noqa: E501

        :return: The is_discarded of this Alert.
        :rtype: bool
        """
        return self._is_discarded

    @is_discarded.setter
    def is_discarded(self, is_discarded: bool):
        """Sets the is_discarded of this Alert.

        discarded or not   # noqa: E501

        :param is_discarded: The is_discarded of this Alert.
        :type is_discarded: bool
        """
        if is_discarded is None:
            raise ValueError("Invalid value for `is_discarded`, must not be `None`")  # noqa: E501

        self._is_discarded = is_discarded
